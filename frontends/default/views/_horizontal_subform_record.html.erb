<%
   record_column = column 
   readonly = (@record.readonly? or not @record.authorized_for?(:crud_type => :update))
   crud_type = @record.new? ? :create : (readonly ? :read : :update)
   show_actions = false 
   config = active_scaffold_config_for(@record.class)
   options = active_scaffold_input_options(config.columns[@record.class.primary_key], scope)
   tr_id = "association-#{options[:id]}"
%>
<tr id="<%= tr_id %>" class="association-record <%= 'association-record-new' if @record.new? -%> <%= 'locked' if locked -%>">
<% config.subform.columns.each :for => @record.class, :crud_type => :read, :flatten => true do |column| %>
<%
  next unless in_subform?(column, parent_record)
  show_actions = true
  column = column.clone
  column.form_ui ||= :select if column.association
-%>
  <td<%= ' class="hidden"'.html_safe if column_renders_as(column) == :hidden %>>
    <% unless readonly and not @record.new? or not @record.authorized_for?(:crud_type => crud_type, :column => column.name) -%>
      <%= render :partial => form_partial_for_column(column), :locals => { :column => column, :scope => scope } -%>
    <% else -%>
      <p><%= get_column_value(@record, column) -%></p>
    <% end -%>
  </td>
<% end -%>
<% if show_actions -%>
  <td class="actions">
    <% if record_column.plural_association? and @record.authorized_for?(:crud_type => :delete) %>
      <% destroy_id = "#{options[:id]}-destroy" %>
      <%= link_to as_(:remove), '#', :class => 'destroy', :id => destroy_id , :onclick => "ActiveScaffold.delete_subform_record(\"#{tr_id}\"); return false;", :style=> "display: none;" %>
      <%= javascript_tag("ActiveScaffold.show('#{destroy_id}');") if !locked %>
    <% end %>
    <% unless @record.new? %>
      <input type="hidden" name="<%= options[:name] -%>" id="<%= options[:id] -%>" value="<%= @record.id -%>" />
    <% end -%>
  </td>
<% end -%>
</tr>
